import os
import re
import gzip
from multiprocessing import Pool, cpu_count
from functools import partial

class FieldMasker:
    def __init__(self, fields):
        combined = '|'.join(map(re.escape, fields))
        self.pattern = re.compile(
            fr'(\b({combined})\s*=\s*)([^&\s]+)|("({combined})"\s*:\s*")([^"]+)(")',
            flags=re.IGNORECASE
        )

    def mask(self, line):
        return self.pattern.sub(
            lambda m: (f'{m.group(1)}******') if m.group(1) else (f'{m.group(4)}******{m.group(7)}'),
            line
        )

def process_file(file_path, masker):
    temp_path = f"{file_path}.tmp"
    is_gz = file_path.lower().endswith('.gz')
    
    try:
        opener = gzip.open if is_gz else open
        with opener(file_path, 'rt') as f_in, \
             opener(temp_path, 'wt') as f_out:
            
            for line in f_in:
                f_out.write(masker.mask(line))
        
        os.replace(temp_path, file_path)
        return True
    except Exception as e:
        if os.path.exists(temp_path):
            os.remove(temp_path)
        return False

def main():
    input_dir = sys.argv[1]
    files = [f.path for f in os.scandir(input_dir) if f.is_file()]
    masker = FieldMasker(["password", "token", "email", "pole1"])
    
    # Automatyczne wykrywanie optymalnej liczby procesów
    with Pool(processes=min(cpu_count(), len(files))) as pool:
        results = pool.map(partial(process_file, masker=masker), files)
        
    success = sum(results)
    print(f"Przetworzono {success}/{len(files)} plików")

if __name__ == "__main__":
    main()
