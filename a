import re
import sys
import os
from time import perf_counter

class FieldMasker:
    def __init__(self, fields):
        combined = '|'.join(map(re.escape, fields))
        self.pattern = re.compile(
            fr'(\b({combined})\s*=\s*)([^&\s]+)|("({combined})"\s*:\s*")([^"]+)(")',
            flags=re.IGNORECASE
        )
    
    def mask(self, line):
        return self.pattern.sub(
            lambda m: (f'{m.group(1)}******') if m.group(1) else (f'{m.group(4)}******{m.group(7)}'),
            line
        )

def main():
    if len(sys.argv) < 2:
        print("Użycie: python mask.py <plik_wejsciowy>")
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = f"{os.path.splitext(input_file)[0]}_anon.log"
    fields_to_mask = ["password", "token", "email", "pole1"]
    
    start_time = perf_counter()
    masker = FieldMasker(fields_to_mask)
    BUFFER_SIZE = 16 * 1024 * 1024  # 16 MB
    BATCH_SIZE = 10000

    try:
        with open(input_file, "r", buffering=BUFFER_SIZE) as f_in, \
             open(output_file, "w", buffering=BUFFER_SIZE) as f_out:

            batch = []
            for line in f_in:
                batch.append(masker.mask(line))
                if len(batch) >= BATCH_SIZE:
                    f_out.writelines(batch)
                    batch.clear()
            
            if batch:
                f_out.writelines(batch)

        print(f"Przetworzono w {perf_counter() - start_time:.2f}s")

    except Exception as e:
        print(f"Błąd: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main()
